# Set up functions that inspect function dependencies.
statement ok
CREATE VIEW v_col_fn_ids AS
SELECT
id,
json_array_elements(
  crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor',
    descriptor,
    false
  )->'table'->'columns'
)->'id' as col_id,
json_array_elements(
  crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor',
    descriptor,
    false
  )->'table'->'columns'
)->'computeExpr' as compute_expr,
json_array_elements(
  crdb_internal.pb_to_json(
    'cockroach.sql.sqlbase.Descriptor',
    descriptor,
    false
  )->'table'->'columns'
)->'usesFunctionIds' as uses_fn_ids
FROM system.descriptor

statement ok
CREATE FUNCTION get_col_fn_ids(table_id INT) RETURNS SETOF v_col_fn_ids
LANGUAGE SQL
AS $$
  SELECT *
  FROM v_col_fn_ids
  WHERE id = table_id
$$;

statement ok
CREATE VIEW v_fn_depended_on_by AS
SELECT
     id,
     jsonb_pretty(
       crdb_internal.pb_to_json(
         'cockroach.sql.sqlbase.Descriptor',
         descriptor,
         false
       )->'function'->'dependedOnBy'
     ) as depended_on_by
FROM system.descriptor

statement ok
CREATE FUNCTION get_fn_depended_on_by(function_id INT) RETURNS STRING
LANGUAGE SQL
AS $$
  SELECT depended_on_by
  FROM v_fn_depended_on_by
  WHERE id = function_id
$$;

statement ok
CREATE FUNCTION test_tbl_f() RETURNS INT IMMUTABLE LANGUAGE SQL AS $$ SELECT 1 $$;

# Test that UDF can be used in index creation while creating table.
statement ok
CREATE TABLE test_tbl_t (a INT PRIMARY KEY, b INT, INDEX idx_b(test_tbl_f()));

let $tbl_id
SELECT id FROM system.namespace WHERE name = 'test_tbl_t';

let $fn_id
SELECT oid::int - 100000 FROM pg_catalog.pg_proc WHERE proname = 'test_tbl_f';

query T rowsort
SELECT get_col_fn_ids($tbl_id);
----
(111,1,,)
(111,2,,)
(111,3,"""[FUNCTION 100110]()""",[110])

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            3
        ],
        "id": 111
    }
]

# Test UDF index creation after table exists.
statement ok
CREATE INDEX t_idx ON test_tbl_t(test_tbl_f());

# Test partial index with UDF in WHERE clause.
statement ok
CREATE INDEX t_idx2 ON test_tbl_t(b) WHERE test_tbl_f() > 0;

# Test expression index with UDF in expression.
statement ok
CREATE INDEX t_idx3 ON test_tbl_t((b + test_tbl_f()));

query T rowsort
SELECT get_col_fn_ids($tbl_id);
----
(111,1,,)
(111,2,,)
(111,3,"""[FUNCTION 100110]()""",[110])
(111,4,"""[FUNCTION 100110]()""",[110])
(111,5,"""b + [FUNCTION 100110]()""",[110])

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            3,
            4,
            5
        ],
        "id": 111
    }
]

# Test multiple UDFs in index expression.
statement ok
CREATE INDEX t_idx4 ON test_tbl_t(test_tbl_f(), b, (test_tbl_f() + 1));

query T rowsort
SELECT get_col_fn_ids($tbl_id);
----
(111,1,,)
(111,2,,)
(111,3,"""[FUNCTION 100110]()""",[110])
(111,4,"""[FUNCTION 100110]()""",[110])
(111,5,"""b + [FUNCTION 100110]()""",[110])
(111,6,"""[FUNCTION 100110]()""",[110])
(111,7,"""[FUNCTION 100110]() + 1:::INT8""",[110])

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            3,
            4,
            5,
            6,
            7
        ],
        "id": 111
    }
]

# Test dropping index removes function dependencies
statement ok
DROP INDEX t_idx;

query T rowsort
SELECT get_col_fn_ids($tbl_id);
----
(111,1,,)
(111,2,,)
(111,3,"""[FUNCTION 100110]()""",[110])
(111,5,"""b + [FUNCTION 100110]()""",[110])
(111,6,"""[FUNCTION 100110]()""",[110])
(111,7,"""[FUNCTION 100110]() + 1:::INT8""",[110])

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            3,
            5,
            6,
            7
        ],
        "id": 111
    }
]

# Test that function cannot be dropped if used in indexes
statement error pgcode 2BP01 cannot drop function "test_tbl_f" because other objects \(\[test.public.test_tbl_t\]\) still depend on it
DROP FUNCTION test_tbl_f;

# Verify that dependencies are cleaned up when indexes are dropped.
statement ok
DROP INDEX t_idx2;

query T rowsort
SELECT get_col_fn_ids($tbl_id);
----
(111,1,,)
(111,2,,)
(111,3,"""[FUNCTION 100110]()""",[110])
(111,5,"""b + [FUNCTION 100110]()""",[110])
(111,6,"""[FUNCTION 100110]()""",[110])
(111,7,"""[FUNCTION 100110]() + 1:::INT8""",[110])

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            3,
            5,
            6,
            7
        ],
        "id": 111
    }
]

statement ok
DROP INDEX t_idx3;

query T rowsort
SELECT get_col_fn_ids($tbl_id);
----
(111,1,,)
(111,2,,)
(111,3,"""[FUNCTION 100110]()""",[110])
(111,6,"""[FUNCTION 100110]()""",[110])
(111,7,"""[FUNCTION 100110]() + 1:::INT8""",[110])

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            3,
            6,
            7
        ],
        "id": 111
    }
]

statement ok
DROP INDEX t_idx4;

query T rowsort
SELECT get_col_fn_ids($tbl_id);
----
(111,1,,)
(111,2,,)
(111,3,"""[FUNCTION 100110]()""",[110])

query T
SELECT get_fn_depended_on_by($fn_id)
----
[
    {
        "columnIds": [
            3
        ],
        "id": 111
    }
]

statement ok
DROP INDEX idx_b;

query T rowsort
SELECT get_col_fn_ids($tbl_id);
----
(111,1,,)
(111,2,,)

query T
SELECT get_fn_depended_on_by($fn_id)
----
NULL

# Now function should be droppable.
statement ok
DROP FUNCTION test_tbl_f;
